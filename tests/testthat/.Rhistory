setwd("~/Documents/regmhmm/tests/testthat")
# generate testing dataset
simulate_mHMM_data <- function(seed_num,
p_noise,
N,
N_persub,
parameters_setting) {
set.seed(seed_num)
# Simulation
## Notation:
### S = # states
### p = # covariates including
## macro
S <- dim(parameters_setting$emis_mat)[1]
p <- dim(parameters_setting$emis_mat)[2] - 1 # first one is always intercept
### initial probability
delta_true <- parameters_setting$init_vec
### transitional probability
#### (S x S: row -> column i.e. [1,2] => From state 1 to state 2.
#### That means row sums should be 1)
trans_mat_true <- parameters_setting$trans_mat
### covariates: emission matrix
#### (S x p: covariates are different across states)
emiss_mat_true <- parameters_setting$emis_mat
### true hidden state
#### (hid_state_true: N x T(N_persub). Same dim as y_mat)
hid_state_true <- matrix(NA, nrow = N, ncol = N_persub)
for (i in 1:N) {
# initial states, following delta_true
hid_state_true[i, 1] <- sample(1:S, 1, prob = delta_true)
# other states, following initial state and transition matrix
for (j in 2:N_persub) {
previous_state <- hid_state_true[i, j - 1]
# the new state should based on the previous state
hid_state_true[i, j] <- sample(1:S, 1,
prob = trans_mat_true[previous_state, ])
}
}
### design matrix
#### for each subject
gen_data_each_subject <- function(sub_i){
b_i <- rnorm(1, sd=sqrt(1))
X <- matrix(NA, nrow=N_persub, ncol=p_noise+p+1) #+1 for intercept
X[,1] <- 1
pho <- matrix(NA, nrow=p_noise+p, ncol=p_noise+p)
pho[] <- 0.5
diag(pho) <- 1
D_diag <- sqrt(diag(1, nrow=p_noise+p, ncol=p_noise+p))
sigma_noise <- D_diag%*%pho%*%D_diag
X[,2:(p_noise+p+1)] <- MASS::mvrnorm(N_persub, mu=rep(0,p_noise+p), Sigma=sigma_noise)
# X <- matrix(NA, nrow=N_persub, ncol=p_noise+p+1)
# X[,1] <- 1
# for(c in 2:(p_noise+p)){
#   X[,c] <- rnorm(N_persub, sd=sqrt(1))
# }
# # X[,2] <- rnorm(N_persub, sd=sqrt(1))
# # X[,3] <- rnorm(N_persub, sd=sqrt(1))
# # X[,4] <- rnorm(N_persub, sd=sqrt(1))
Z <- matrix(NA, nrow=N_persub, ncol=1)
Z[,1] <- 1
### observation
#### half are State 1 or State 2
##### eta
eta_true <- rep(NA, N_persub)
beta_s1 <- as.matrix(emiss_mat_true[1,])
beta_s2 <- as.matrix(emiss_mat_true[2,])
for(j in 1:N_persub){
if(hid_state_true[sub_i,j]==1){
# +1 is for the intercept
eta_true[j] <- X[j,1:(p+1)]%*%beta_s1 + b_i
} else if(hid_state_true[sub_i,j]==2){
eta_true[j] <- X[j,1:(p+1)]%*%beta_s2 + b_i
}
}
##### mu
mu_true <- 1 / (1 + exp(-eta_true))
##### y
###### adding some random noise for mu?
y <- rbinom(N_persub, 1, prob = mu_true)
return_list <- list()
return_list[["X"]] <- X
return_list[["y"]] <- y
return_list[["Z"]] <- Z
return(return_list)
}
### combine all subject's data
#### X is a N x T(N_persub) x p cube
#### y_mat is a N x T(N_persub) matrix
X_array <- array(NA, dim = c(N_persub, p + p_noise + 1, N)) #+1 for intercept
y_mat <- matrix(NA, nrow = N, ncol = N_persub)
Z_array <- array(NA, dim=c(N_persub, 1, N))
for (i in 1:N) {
get_data_iter <- gen_data_each_subject(i)
X_array[, , i] <- get_data_iter$X
Z_array[,,i] <- get_data_iter$Z
y_mat[i, ] <- get_data_iter$y
}
# sim_dat_list <- vector(mode="list", length = 3)
sim_dat_list <- vector(mode = "list", length = 2)
# need the one with noise
# sim_dat_list[[1]] <- X_array
sim_dat_list[[1]] <- X_array
sim_dat_list[[2]] <- Z_array
sim_dat_list[[3]] <- y_mat
names(sim_dat_list) <- c(
"X_array",
"Z_array",
"y_mat"
)
return(sim_dat_list)
}
# simulate data
N_persub <- 10
N <- 100
p <- 3
p_noise <- 7
parameters_setting <- list()
parameters_setting$emis_mat <- matrix(NA, nrow = 2, ncol = 4)
parameters_setting$emis_mat[1, 1] <- 0.1
parameters_setting$emis_mat[1, 2] <- 0.5
parameters_setting$emis_mat[1, 3] <- -0.75
parameters_setting$emis_mat[1, 4] <- 0.75
parameters_setting$emis_mat[2, 1] <- -0.1
parameters_setting$emis_mat[2, 2] <- -0.5
parameters_setting$emis_mat[2, 3] <- 0.75
parameters_setting$emis_mat[2, 4] <- 1
parameters_setting$trans_mat <- matrix(NA, nrow = 2, ncol = 2)
parameters_setting$trans_mat[1, 1] <- 0.65
parameters_setting$trans_mat[1, 2] <- 0.35
parameters_setting$trans_mat[2, 1] <- 0.2
parameters_setting$trans_mat[2, 2] <- 0.8
parameters_setting$init_vec <- c(0.65, 0.35)
parameters_setting$b <- 0.6
dat_m <- simulate_mHMM_data(
seed_num = 1,
p_noise = p_noise,
N = N,
N_persub = N_persub,
parameters_setting = parameters_setting
)
L = 2
emiss_mat_start <- matrix(NA, nrow=2, ncol=p+p_noise+1)
delta_start <- rep(NA, 2)
trans_mat_start <- matrix(NA, nrow=2, ncol=2)
pi_init <- rep(1/L, L)
b_L <- rnorm(L, mean=0, sd=0.01)
b_L <- matrix(b_L)
emiss_mat_start[1,] <- rnorm(p+p_noise+1, mean=0, sd=1)
emiss_mat_start[2,] <- rnorm(p+p_noise+1, mean=0, sd=1)
delta_start[1] <- runif(1, min=0.01, max=0.99)
delta_start[2] <- 1-delta_start[1]
trans_mat_start[1,1] <- runif(1, min=0.01, max=0.99)
trans_mat_start[1,2] <- 1-trans_mat_start[1,1]
trans_mat_start[2,1] <- runif(1, min=0.01, max=0.99)
trans_mat_start[2,2] <- 1-trans_mat_start[2,1]
library("recmhmm")
library("regmhmm")
rHMM_fit <- rmHMM(
# delta = HMM_get$delta_hat,
delta = delta_start,
Y_mat=dat_m$y_mat,
A=trans_mat_start,
B=emiss_mat_start,
X_cube=dat_m$X_array,
Z_cube=dat_m$Z_array,
b_L=b_L,
pi=pi_init,
family="D",
N_iter=3
)
